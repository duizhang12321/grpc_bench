// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

option go_package = "proto/helloworld";
option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The actual message exchanged by the client and the server.
// NOTE: When creating a custom scenario plese edit only this message.
message Hello {
  optional bytes f1 = 1;
  optional bytes f2 = 2;
  optional float f3 = 3;
  message M96 {
    optional string f1 = 1;
    optional bytes f2 = 2;
    optional bytes f3 = 3;
    optional int64 f4 = 6;
    repeated bytes f5 = 9;
    optional bytes f6 = 10;
    message M97 {
      message M98 {
        optional bytes f1 = 2;
        optional bytes f2 = 5;
        optional bytes f3 = 6;
        optional bytes f4 = 7;
        message M99 {
          optional bytes f1 = 1;
        }
        optional M99 f5 = 10;
        message M100 {
          optional int32 f1 = 1;
          optional int64 f2 = 4;
          repeated int32 f3 = 5;
          message M101 {
            optional bytes f1 = 1;
            optional string f2 = 3;
            message M102 {
              optional bool f1 = 1;
              optional int64 f2 = 4;
              repeated float f3 = 5;
              optional string f4 = 7;
              optional string f5 = 9;
              optional bool f6 = 12;
              message M103 {
                optional bytes f1 = 2;
                repeated int32 f2 = 4;
                optional bytes f3 = 6;
                optional string f4 = 7;
                message M104 {
                  optional bytes f1 = 1;
                }
                optional M104 f5 = 8;
                optional bytes f6 = 10;
                optional string f7 = 11;
              }
              optional M103 f7 = 14;
              optional bytes f8 = 15;
              optional bytes f9 = 16;
              optional string f10 = 18;
            }
            optional M102 f3 = 6;
            message M105 {
              repeated float f1 = 1;
            }
            optional M105 f4 = 7;
            optional bytes f5 = 8;
          }
          optional M101 f4 = 7;
          message M106 {
            message M107 {
              optional bytes f1 = 1;
              repeated float f2 = 2;
              optional int64 f3 = 6;
              message M108 {
                message M109 {
                  optional bytes f1 = 1;
                  optional string f2 = 2;
                  optional string f3 = 5;
                  optional bytes f4 = 6;
                  repeated float f5 = 7;
                  message M110 {
                    optional bytes f1 = 1;
                    optional string f2 = 2;
                    message M111 {
                      optional string f1 = 2;
                      optional int32 f2 = 3;
                      optional string f3 = 4;
                    }
                    optional M111 f3 = 3;
                    optional bytes f4 = 4;
                    optional bytes f5 = 5;
                    optional bytes f6 = 6;
                  }
                  optional M110 f6 = 9;
                  optional string f7 = 10;
                  optional bytes f8 = 12;
                }
                optional M109 f1 = 1;
                optional int64 f2 = 4;
                optional uint64 f3 = 5;
                repeated bytes f4 = 6;
              }
              optional M108 f4 = 8;
            }
            optional M107 f1 = 1;
            optional bytes f2 = 2;
            optional string f3 = 3;
            optional bytes f4 = 4;
          }
          optional M106 f5 = 8;
          optional bytes f6 = 10;
        }
        optional M100 f6 = 12;
        message M112 {
          optional string f1 = 2;
          optional bytes f2 = 4;
          optional bytes f3 = 10;
          repeated int32 f4 = 13;
          repeated bytes f5 = 14;
          optional bytes f6 = 19;
          optional bytes f7 = 20;
          enum E1 {
            E1_CONST_1 = 66;
            E1_CONST_2 = 4643;
            E1_CONST_3 = 88;
            E1_CONST_4 = 26;
            E1_CONST_5 = 92;
          }
          optional E1 f8 = 22;
          optional string f9 = 23;
          optional bytes f10 = 25;
          repeated bytes f11 = 26;
        }
        optional M112 f7 = 13;
        optional bytes f8 = 14;
      }
      optional M98 f1 = 2;
      optional bytes f2 = 3;
    }
    optional M97 f7 = 11;
    repeated string f8 = 13;
    optional double f9 = 19;
    optional string f10 = 20;
    optional bytes f11 = 22;
    message M113 {
      optional int64 f1 = 1;
      message M114 {
        repeated bytes f1 = 2;
        repeated int64 f2 = 4;
      }
      optional M114 f2 = 2;
      optional bytes f3 = 4;
      optional string f4 = 6;
      optional string f5 = 8;
      optional bytes f6 = 9;
    }
    optional M113 f12 = 23;
    optional bytes f13 = 24;
  }
  optional M96 f4 = 4;
  message M115 {
    optional bytes f1 = 2;
    optional bytes f2 = 6;
    optional string f3 = 7;
    message M116 {
      optional bool f1 = 1;
      optional bytes f2 = 2;
    }
    optional M116 f4 = 8;
    message M117 {
      optional string f1 = 4;
      optional bytes f2 = 10;
      optional bytes f3 = 11;
      optional string f4 = 12;
      repeated int32 f5 = 13;
    }
    optional M117 f5 = 10;
    message M118 {
      optional bytes f1 = 2;
      message M119 {
        optional bytes f1 = 3;
        optional bytes f2 = 4;
      }
      optional M119 f2 = 3;
      optional bytes f3 = 4;
      optional float f4 = 9;
    }
    optional M118 f6 = 11;
    optional bool f7 = 12;
    optional string f8 = 13;
    optional float f9 = 14;
    message M120 {
      optional bytes f1 = 1;
      repeated bytes f2 = 2;
      optional bytes f3 = 4;
      message M121 {
        optional bytes f1 = 1;
        optional bytes f2 = 3;
        repeated int32 f3 = 4;
        optional string f4 = 5;
        optional bytes f5 = 6;
        optional bytes f6 = 7;
        optional bytes f7 = 8;
        optional float f8 = 9;
        optional string f9 = 10;
        optional bytes f10 = 12;
      }
      optional M121 f4 = 5;
      message M122 {
        optional string f1 = 3;
        enum E1 {
          E1_CONST_1 = 34;
          E1_CONST_2 = 99;
          E1_CONST_3 = 4;
          E1_CONST_4 = 14;
          E1_CONST_5 = 93;
        }
        repeated E1 f2 = 4;
        optional string f3 = 5;
        optional float f4 = 7;
        optional bool f5 = 11;
        optional bytes f6 = 12;
        optional bytes f7 = 13;
        repeated int64 f8 = 14;
      }
      optional M122 f5 = 6;
      optional bytes f6 = 7;
    }
    optional M120 f10 = 18;
    optional bytes f11 = 21;
  }
  optional M115 f5 = 5;
  message M123 {
    message M124 {
      message M125 {
        optional string f1 = 1;
        optional bool f2 = 2;
      }
      optional M125 f1 = 2;
      message M126 {
        optional bytes f1 = 1;
      }
      optional M126 f2 = 4;
      repeated int32 f3 = 5;
      message M127 {
        optional bytes f1 = 2;
        message M128 {
          repeated float f1 = 1;
          optional bytes f2 = 3;
          message M129 {
            optional bytes f1 = 1;
            optional bytes f2 = 2;
            optional bytes f3 = 4;
          }
          optional M129 f3 = 6;
        }
        optional M128 f2 = 4;
      }
      optional M127 f4 = 7;
    }
    optional M124 f1 = 2;
    message M130 {
      optional string f1 = 1;
      message M131 {
        message M132 {
          optional string f1 = 1;
          optional bytes f2 = 2;
        }
        optional M132 f1 = 2;
        optional string f2 = 3;
        message M133 {
          optional bytes f1 = 1;
          optional int32 f2 = 2;
        }
        optional M133 f3 = 9;
        message M134 {
          optional bytes f1 = 3;
        }
        optional M134 f4 = 11;
      }
      optional M131 f2 = 2;
      optional float f3 = 3;
    }
    optional M130 f2 = 3;
    message M135 {
      message M136 {
        optional float f1 = 1;
      }
      optional M136 f1 = 1;
      message M137 {
        optional bytes f1 = 1;
      }
      optional M137 f2 = 2;
      optional bytes f3 = 3;
    }
    optional M135 f3 = 5;
    message M138 {
      optional bytes f1 = 2;
      message M139 {
        optional bytes f1 = 1;
        repeated bytes f2 = 3;
        optional bytes f3 = 5;
        optional bytes f4 = 6;
      }
      optional M139 f2 = 3;
      optional bool f3 = 5;
      optional bytes f4 = 6;
    }
    optional M138 f4 = 6;
    message M140 {
      message M141 {
        repeated bytes f1 = 1;
        repeated bytes f2 = 4;
        optional int32 f3 = 5;
        optional string f4 = 6;
        message M142 {
          optional bytes f1 = 1;
          message M143 {
            optional bytes f1 = 5;
          }
          optional M143 f2 = 2;
          optional int32 f3 = 3;
          enum E1 {
            E1_CONST_1 = 68;
            E1_CONST_2 = 11472;
            E1_CONST_3 = 17;
            E1_CONST_4 = 121;
            E1_CONST_5 = 61;
          }
          optional E1 f4 = 4;
          optional string f5 = 5;
          optional bytes f6 = 6;
          repeated bytes f7 = 7;
          optional int64 f8 = 8;
          optional bytes f9 = 9;
          optional bytes f10 = 10;
          repeated float f11 = 11;
          optional int32 f12 = 12;
        }
        optional M142 f5 = 7;
        optional bytes f6 = 9;
        optional string f7 = 10;
        repeated bytes f8 = 13;
        repeated uint64 f9 = 14;
        optional bytes f10 = 16;
        repeated int32 f11 = 22;
        optional bytes f12 = 23;
        message M144 {
          optional bytes f1 = 1;
          message M145 {
            repeated float f1 = 2;
            optional bytes f2 = 5;
          }
          optional M145 f2 = 4;
        }
        optional M144 f13 = 24;
      }
      optional M141 f1 = 3;
      optional bytes f2 = 4;
      message M146 {
        optional string f1 = 1;
        message M147 {
          optional bytes f1 = 1;
        }
        optional M147 f2 = 2;
        optional string f3 = 3;
        message M148 {
          message M149 {
            optional bytes f1 = 1;
            message M150 {
              optional string f1 = 10;
              repeated int64 f2 = 11;
            }
            optional M150 f2 = 2;
          }
          optional M149 f1 = 2;
          optional bytes f2 = 4;
          optional bytes f3 = 5;
          repeated string f4 = 7;
        }
        optional M148 f4 = 4;
        repeated int32 f5 = 5;
        optional bytes f6 = 6;
        optional string f7 = 12;
      }
      optional M146 f3 = 5;
    }
    optional M140 f5 = 8;
    optional int32 f6 = 9;
  }
  optional M123 f6 = 6;
  repeated int32 f7 = 7;
  repeated float f8 = 13;
  optional uint64 f9 = 15;
  optional double f10 = 17;
  optional bytes f11 = 18;
  repeated uint64 f12 = 19;
  optional bytes f13 = 20;
  optional bytes f14 = 21;
}

// The request message from the client.
message HelloRequest {
  required Hello request = 1;
}

// The response message from the server.
message HelloReply {
  required Hello response = 1;
}
