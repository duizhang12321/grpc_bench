// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

option go_package = "proto/helloworld";
option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The actual message exchanged by the client and the server.
// NOTE: When creating a custom scenario plese edit only this message.
message Hello {
  optional string f1 = 4;
  repeated bytes f2 = 6;
  message M205 {
    message M206 {
      optional bytes f1 = 1;
      message M207 {
        optional bytes f1 = 3;
      }
      optional M207 f2 = 2;
      message M208 {
        optional bytes f1 = 3;
        message M209 {
          repeated bytes f1 = 2;
        }
        optional M209 f2 = 4;
        message M210 {
          repeated bytes f1 = 2;
          optional bytes f2 = 3;
          optional bytes f3 = 4;
          message M211 {
            optional fixed64 f1 = 1;
            optional string f2 = 2;
            message M212 {
              repeated int32 f1 = 2;
              optional bytes f2 = 3;
              message M213 {
                optional bytes f1 = 1;
                message M214 {
                  optional string f1 = 1;
                }
                optional M214 f2 = 2;
                optional int64 f3 = 3;
                optional bool f4 = 4;
                optional bytes f5 = 5;
              }
              optional M213 f3 = 4;
              optional bytes f4 = 5;
              repeated int32 f5 = 6;
              optional bytes f6 = 7;
            }
            optional M212 f3 = 3;
            optional bytes f4 = 4;
            optional bytes f5 = 7;
          }
          optional M211 f4 = 9;
          optional bytes f5 = 13;
          optional bytes f6 = 15;
        }
        optional M210 f3 = 5;
      }
      optional M208 f3 = 6;
      message M215 {
        optional float f1 = 1;
      }
      optional M215 f4 = 7;
      message M216 {
        optional float f1 = 1;
        message M217 {
          optional bytes f1 = 1;
          optional float f2 = 2;
        }
        optional M217 f2 = 2;
        message M218 {
          optional bytes f1 = 1;
          optional bytes f2 = 2;
          repeated int32 f3 = 8;
          optional bytes f4 = 9;
        }
        optional M218 f3 = 3;
      }
      optional M216 f5 = 9;
      message M219 {
        optional float f1 = 1;
        optional int32 f2 = 2;
        optional int32 f3 = 3;
        message M220 {
          optional bytes f1 = 4;
          optional bytes f2 = 5;
        }
        optional M220 f4 = 7;
      }
      optional M219 f6 = 19;
      optional bytes f7 = 20;
      message M221 {
        optional bytes f1 = 1;
        message M222 {
          optional bytes f1 = 1;
        }
        optional M222 f2 = 2;
      }
      optional M221 f8 = 21;
    }
    optional M206 f1 = 1;
    optional bytes f2 = 4;
    message M223 {
      optional int32 f1 = 1;
    }
    optional M223 f3 = 5;
    repeated int32 f4 = 6;
  }
  optional M205 f3 = 8;
  optional string f4 = 11;
  enum E1 {
    E1_CONST_1 = 101;
    E1_CONST_2 = 71;
    E1_CONST_3 = 75;
    E1_CONST_4 = 48;
    E1_CONST_5 = 116;
  }
  repeated E1 f5 = 13;
  message M224 {
    message M225 {
      optional int32 f1 = 2;
      message M226 {
        optional string f1 = 1;
      }
      optional M226 f2 = 3;
      optional string f3 = 4;
    }
    optional M225 f1 = 7;
    optional string f2 = 8;
    message M227 {
      optional bytes f1 = 2;
      repeated int32 f2 = 5;
      message M228 {
        optional bytes f1 = 1;
      }
      optional M228 f3 = 6;
      message M229 {
        optional int32 f1 = 1;
        message M230 {
          message M231 {
            optional bytes f1 = 1;
          }
          optional M231 f1 = 1;
          optional string f2 = 3;
        }
        optional M230 f2 = 3;
        message M232 {
          repeated string f1 = 1;
        }
        optional M232 f3 = 5;
      }
      optional M229 f4 = 7;
      optional string f5 = 9;
      message M233 {
        repeated float f1 = 1;
        optional string f2 = 3;
        optional bool f3 = 4;
        optional int32 f4 = 6;
        optional string f5 = 7;
      }
      optional M233 f6 = 18;
    }
    optional M227 f3 = 9;
  }
  optional M224 f6 = 14;
  message M234 {
    optional bytes f1 = 6;
    message M235 {
      message M236 {
        optional bytes f1 = 1;
        message M237 {
          optional float f1 = 1;
        }
        optional M237 f2 = 5;
      }
      optional M236 f1 = 1;
      optional uint64 f2 = 4;
    }
    optional M235 f2 = 7;
  }
  optional M234 f7 = 15;
}

// The request message from the client.
message HelloRequest {
  required Hello request = 1;
}

// The response message from the server.
message HelloReply {
  required Hello response = 1;
}
